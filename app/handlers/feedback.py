# app/handlers/feedback.py
from __future__ import annotations

import time
import logging

from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from ..config import settings
from ..security import hash_user_id, encrypt_feedback
from ..db import open_db, get_user_kv, set_user_kv

router = Router()
log = logging.getLogger(__name__)


class FeedbackForm(StatesGroup):
    waiting_text = State()


@router.message(F.text == "/feedback")
async def fb_intro(msg: Message, state: FSMContext):
    await state.set_state(FeedbackForm.waiting_text)
    await msg.answer(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –æ—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏ /cancel."
    )


@router.message(F.text == "/cancel")
async def fb_cancel(msg: Message, state: FSMContext):
    cur = await state.get_state()
    if cur == FeedbackForm.waiting_text:
        await state.clear()
        await msg.answer("–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∏–ª–∞. –ï—Å–ª–∏ —Ä–µ—à–∏—à—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /feedback –µ—â—ë —Ä–∞–∑.")


@router.message(FeedbackForm.waiting_text, F.text)
async def fb_save(msg: Message, state: FSMContext):
    tg_hash = hash_user_id(msg.from_user.id)
    text = (msg.text or "").strip()

    # –ö—É–ª–¥–∞—É–Ω 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key_cd = f"fb:last:{tg_hash}"
    last = await get_user_kv(tg_hash, key_cd)
    try:
        last_ts = float(last) if last else 0.0
    except Exception:
        last_ts = 0.0
    if time.time() - last_ts < 60:
        await msg.answer("–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –º–∏–Ω—É—Ç–æ—á–∫—É üòä")
        return

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    db = await open_db()
    try:
        blob = encrypt_feedback(text)
        await db.execute(
            "INSERT INTO feedback(tg_hash, created_at, blob) VALUES(?,?,?)",
            (tg_hash, int(time.time()), blob),
        )
        await db.commit()
    finally:
        await db.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –∫—É–ª–¥–∞—É–Ω–∞
    await set_user_kv(tg_hash, key_cd, str(time.time()))

    # –¢–æ–ª—å–∫–æ –ª–æ–≥ –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω-–±–æ—Ç —á–µ—Ä–µ–∑ watcher
    log.info("Feedback saved: user=%s len=%d preview=%r", tg_hash[:8], len(text), text[:40])
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –Ø –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º.")
    await state.clear()
