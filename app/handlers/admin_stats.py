# app/handlers/admin_stats.py
import time
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from ..config import settings
from ..db import get_active_counts, get_total_users_count, get_user_stats_30d
from ..security import hash_user_id
from ..limits import get_limits_snapshot, add_bonus_messages
from ..db import get_user_flag, set_user_flag  # grace_reset

router = Router()
_START_TS = int(time.time())

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def _is_admin(user_id: int) -> bool:
    try:
        ids = set(int(x) for x in settings.admin_ids)
    except Exception:
        ids = set()
    return int(user_id) in ids

async def _safe_edit(message, text: str, reply_markup: InlineKeyboardMarkup | None = None, parse_mode: str | None = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–µ —à—É–º–∏–º –Ω–∞ 'message is not modified')."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            try:
                await message.edit_reply_markup(reply_markup=reply_markup)
            except TelegramBadRequest as e2:
                if "message is not modified" in str(e2).lower():
                    return
                raise
        else:
            raise

def _kb_stats() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:refresh")
    kb.adjust(1)
    return kb.as_markup()

def _fmt_bool(b: bool) -> str:
    return "‚úÖ" if b else "‚Äî"

def _fmt_top(rows: list[dict], limit: int = 10) -> str:
    if not rows:
        return "_–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö_"
    lines = []
    for i, row in enumerate(rows[:limit], 1):
        tg_hash = (row.get("tg_hash") or "")[:8]
        cnt = int(row.get("msg_30d", 0) or 0)
        has_p = bool(row.get("has_purchases", False))
        has_s = bool(row.get("has_subscription", False))
        avg = cnt / 30.0 if cnt else 0.0
        lines.append(
            f"{i:>2}. {tg_hash} ‚Äî {cnt} msg/30d (~{avg:.1f}/d)  "
            f"–ü–æ–∫—É–ø–∫–∏: {_fmt_bool(has_p)}  –ü–æ–¥–ø–∏—Å–∫–∞: {_fmt_bool(has_s)}"
        )
    return "\n".join(lines)

async def _stats_text() -> str:
    dau, wau, mau = await get_active_counts()
    total = await get_total_users_count()
    top = await get_user_stats_30d(limit=20)
    lines = [
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*",
        f"DAU: *{dau}*   WAU: *{wau}*   MAU: *{mau}*   Total: *{total}*",
        "",
        "*–¢–æ–ø / –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π*",
        _fmt_top(top, limit=10),
    ]
    return "\n".join(lines)

def _parse_target(arg: str | None) -> str | None:
    if not arg:
        return None
    s = arg.strip()
    if s.isdigit():
        return hash_user_id(int(s))
    # –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ref_
    if s.startswith("ref_"):
        s = s[4:]
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è tg_hash (—Å—Ç—Ä–æ–∫–∏ –æ—Ç security/sha-hex)
    return s if 6 <= len(s) <= 128 else None

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ----------

@router.message(Command("admin"))
@router.message(Command("stats"))
async def admin_stats_entry(msg: Message):
    if not _is_admin(msg.from_user.id):
        await msg.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    text = await _stats_text()
    await msg.answer(text, reply_markup=_kb_stats(), parse_mode="Markdown")

@router.callback_query(F.data == "admin:refresh")
async def admin_refresh(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    text = await _stats_text()
    await _safe_edit(cb.message, text, reply_markup=_kb_stats(), parse_mode="Markdown")
    await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

# ---- –±–æ–Ω—É—Å—ã/–≥—Ä–µ–π—Å ‚Äî (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –±—ã–ª–æ —É –≤–∞—Å, –Ω–∏–∂–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä) ----

@router.message(Command("grant"))
async def admin_grant(msg: Message, command: CommandObject):
    if not _is_admin(msg.from_user.id):
        return
    parts = (command.args or "").split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/grant 123456789 50</code>", parse_mode="HTML")
        return
    tg_hash = _parse_target(parts[0])
    amount = int(parts[1])
    if not tg_hash:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/grant 123456789 50</code>", parse_mode="HTML")
        return
    await add_bonus_messages(tg_hash, amount)
    snap = await get_limits_snapshot(tg_hash)
    paid = snap.get("paid_messages", 0) if snap else "?"
    await msg.answer(f"–ì–æ—Ç–æ–≤–æ. –ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{amount}</b>. –¢–µ–∫—É—â–∏–µ paid_messages: <b>{paid}</b>", parse_mode="HTML")

@router.message(Command("grace_reset"))
async def admin_grace_reset(msg: Message, command: CommandObject):
    if not _is_admin(msg.from_user.id):
        return
    arg = (command.args or "").strip()
    tg_hash = _parse_target(arg)
    if not tg_hash:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/grace_reset 123456789</code>", parse_mode="HTML")
        return
    await set_user_flag(tg_hash, "grace_reset", True)
    await msg.answer("–§–ª–∞–≥ grace_reset –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.", parse_mode="HTML")

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π aiogram) ----------

@router.errors()
async def suppress_not_modified(event=None, exception=None):
    """–¢–∏—à–µ –¥–ª—è 'message is not modified' ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤—ã–∑–æ–≤–∞."""
    if isinstance(exception, TelegramBadRequest) and "message is not modified" in str(exception).lower():
        return True
    return False
